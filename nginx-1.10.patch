--- nginx-1.10.0.orig/src/http/ngx_http_upstream.h
+++ nginx-1.10.0/src/http/ngx_http_upstream.h
@@ -373,6 +373,7 @@ struct ngx_http_upstream_s {
     unsigned                         request_sent:1;
     unsigned                         request_body_sent:1;
     unsigned                         header_sent:1;
+    unsigned                         blocked:1;
 };


@@ -405,7 +406,8 @@ char *ngx_http_upstream_param_set_slot(n
 ngx_int_t ngx_http_upstream_hide_headers_hash(ngx_conf_t *cf,
     ngx_http_upstream_conf_t *conf, ngx_http_upstream_conf_t *prev,
     ngx_str_t *default_hide_headers, ngx_hash_init_t *hash);
-
+void ngx_http_upstream_connect(ngx_http_request_t *r,
+    ngx_http_upstream_t *u);

 #define ngx_http_conf_upstream_srv_conf(uscf, module)                         \
     uscf->srv_conf[module.ctx_index]
--- nginx-1.10.0.orig/src/http/ngx_http_upstream.c
+++ nginx-1.10.0/src/http/ngx_http_upstream.c
@@ -31,8 +31,8 @@ static void ngx_http_upstream_rd_check_b
 static void ngx_http_upstream_wr_check_broken_connection(ngx_http_request_t *r);
 static void ngx_http_upstream_check_broken_connection(ngx_http_request_t *r,
     ngx_event_t *ev);
-static void ngx_http_upstream_connect(ngx_http_request_t *r,
-    ngx_http_upstream_t *u);
+//static void ngx_http_upstream_connect(ngx_http_request_t *r,
+//    ngx_http_upstream_t *u);
 static ngx_int_t ngx_http_upstream_reinit(ngx_http_request_t *r,
     ngx_http_upstream_t *u);
 static void ngx_http_upstream_send_request(ngx_http_request_t *r,
@@ -1330,32 +1330,35 @@ ngx_http_upstream_connect(ngx_http_reque
 {
     ngx_int_t          rc;
     ngx_connection_t  *c;
+    if (!u->blocked) {
+        r->connection->log->action = "connecting to upstream";

-    r->connection->log->action = "connecting to upstream";
-
-    if (u->state && u->state->response_time) {
-        u->state->response_time = ngx_current_msec - u->state->response_time;
-    }
+       if (u->state && u->state->response_time) {
+            u->state->response_time = ngx_current_msec - u->state->response_time;
+        }

-    u->state = ngx_array_push(r->upstream_states);
-    if (u->state == NULL) {
-        ngx_http_upstream_finalize_request(r, u,
-                                           NGX_HTTP_INTERNAL_SERVER_ERROR);
-        return;
-    }
-
-    ngx_memzero(u->state, sizeof(ngx_http_upstream_state_t));
+        u->state = ngx_array_push(r->upstream_states);
+        if (u->state == NULL) {
+            ngx_http_upstream_finalize_request(r, u,
+                                             NGX_HTTP_INTERNAL_SERVER_ERROR);
+            return;
+        }

-    u->state->response_time = ngx_current_msec;
-    u->state->connect_time = (ngx_msec_t) -1;
-    u->state->header_time = (ngx_msec_t) -1;
+        ngx_memzero(u->state, sizeof(ngx_http_upstream_state_t));

+        u->state->response_time = ngx_current_msec;
+        u->state->connect_time = (ngx_msec_t) -1;
+        u->state->header_time = (ngx_msec_t) -1;
+    }
     rc = ngx_event_connect_peer(&u->peer);

     ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                    "http upstream connect: %i", rc);
+   if (rc == NGX_BLOCK) {
+            return;
+    }

-    if (rc == NGX_ERROR) {
+   if (rc == NGX_ERROR) {
         ngx_http_upstream_finalize_request(r, u,
                                            NGX_HTTP_INTERNAL_SERVER_ERROR);
         return;
--- nginx-1.10.0.orig/src/core/ngx_core.h
+++ nginx-1.10.0/src/core/ngx_core.h
@@ -40,7 +40,7 @@ typedef void (*ngx_connection_handler_pt
 #define  NGX_DONE       -4
 #define  NGX_DECLINED   -5
 #define  NGX_ABORT      -6
-
+#define  NGX_BLOCK      -7

 #include <ngx_errno.h>
 #include <ngx_atomic.h>
--- nginx-1.10.0.orig/src/http/ngx_http_upstream.c
+++ nginx-1.10.0/src/http/ngx_http_upstream.c
@@ -1325,7 +1325,7 @@ ngx_http_upstream_check_broken_connectio
 }


-static void
+void
 ngx_http_upstream_connect(ngx_http_request_t *r, ngx_http_upstream_t *u)
 {
     ngx_int_t          rc;


